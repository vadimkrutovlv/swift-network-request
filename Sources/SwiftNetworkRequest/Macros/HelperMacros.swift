/// A Swift macro used to customize the key name of a property in the generated JSON request body.
///
/// The `@RequestBodyKey` macro allows you to specify a custom key name for a property when the macro system generates the `CodingKeys` enum for JSON encoding. This is useful when the backend expects snake_case or otherwise different key naming from Swift's camelCase convention.
///
/// ## Usage
///
/// Apply `@RequestBodyKey("custom_key")` to any property that should have a different key name in the serialized request body. When at least one property in the struct has this macro applied, a `CodingKeys` enum will be automatically generated to reflect the custom mapping.
///
/// ### Example
///
/// ```swift
/// struct Post: Identifiable, Codable, Equatable {
///     @ExcludeFromRequest let id: Int
///     @RequestBodyKey("user_id") var userId: Int
///     var title: String
///     var body: String
///
///     struct PostRequestBody: Codable, Equatable {
///         let userId: Int
///         let title: String
///         let body: String
///
///         enum CodingKeys: String, CodingKey {
///             case userId = "user_id"
///             case title
///             case body
///         }
///     }
/// }
/// ```
/// ## Related Macros
///
/// - ``ExcludeFromRequest()``: For omitting properties from the request body entirely
/// - ``Post(url:headers:queryParams:)``: For creating new resources
/// - ``Put(url:headers:queryParams:)``: For for updating existing resources
///
/// In the example above, the `userId` property will be encoded as `"user_id"` in the request body JSON:
///
/// ```json
/// {
///   "user_id": 42,
///   "title": "Hello",
///   "body": "World"
/// }
/// ```
///
/// ## Behavior
///
/// - Automatically triggers generation of a `CodingKeys` enum if at least one property uses `@RequestBodyKey`.
/// - Works in tandem with macros like `@Post`, `@Put`, and others that generate request methods.
/// - Can be combined with `@ExcludeFromRequest` to control exactly which fields are included and how theyâ€™re named.
///
/// ## Parameters
///
/// - `name`: The custom key string to be used in the JSON request body.
///

@attached(peer, names: arbitrary)
public macro RequestBodyKey(_ name: String) = #externalMacro(
    module: "SwiftNetworkRequestMacros",
    type: "RequestBodyKeyMacro"
)

/// A Swift macro that excludes specific properties from being included in the generated HTTP request body.
///
/// The `@ExcludeFromRequest` macro is used to mark properties that should not be included when serializing a model to JSON for network requests (e.g. `POST`, `PUT`). This is particularly useful for server-managed fields, computed values, or metadata that should not be sent to the backend.
///
/// ## Usage
///
/// Apply `@ExcludeFromRequest` to any property in your model that should be excluded from the automatically generated request body:
///
/// ```swift
/// struct Post: Identifiable, Codable, Equatable {
///     @ExcludeFromRequest let id: Int                    // Not included in request body
///     @RequestBodyKey("user_id") var userId: Int         // Included as "user_id"
///     var title: String                                   // Included
///     var body: String                                    // Included
///
///     struct PostRequestBody: Codable, Equatable {
///         let userId: Int
///         let title: String
///         let body: String
///
///         enum CodingKeys: String, CodingKey {
///             case userId = "user_id"
///             case title
///             case body
///         }
///     }
/// }
/// ```
///
/// ### Explanation
///
/// In this example:
/// - `id` is excluded from the request body using `@ExcludeFromRequest`
/// - `userId` uses `@RequestBodyKey("user_id")` to rename the field in the JSON
/// - `title` and `body` are included as-is
///
/// The resulting request body JSON will look like:
///
/// ```json
/// {
///   "user_id": 123,
///   "title": "My Title",
///   "body": "Post body text"
/// }
/// ```
///
/// ## Behavior
///
/// - Prevents the marked property from being encoded in the body of outgoing network requests.
/// - Works alongside macros such as `@Post`, `@Put`, and others that automatically serialize models.
/// - Ideal for:
///   - Primary keys like `id`
///   - Timestamps (`createdAt`, `updatedAt`)
///   - Read-only or computed properties
///   - Backend-generated values
///
/// ## Best Practices
///
/// Use `@ExcludeFromRequest` for any values that:
/// - Are generated by the server
/// - Should not be editable or submitted by the client
/// - Do not belong in the creation/update payload
///
/// ## Related Macros
///
/// - ``RequestBodyKey(_:)``: For customizing JSON key names in request bodies
/// - ``Post(url:headers:queryParams:)``: For creating new resources
/// - ``Put(url:headers:queryParams:)``: For for updating existing resources
///
/// ## Example
///
/// ```swift
/// var post = try await Post.get(id: 1)
/// post.body = "Updated body"
/// try await post.put() // Will send only userId, title, body (no id)
/// ```
///
/// ## Parameters
///
/// - None. Simply apply `@ExcludeFromRequest` to exclude a property.
@attached(peer, names: arbitrary)
public macro ExcludeFromRequest() = #externalMacro(
    module: "SwiftNetworkRequestMacros",
    type: "ExcludedFromBodyMacro"
)
